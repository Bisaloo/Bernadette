// Generated by rstantools.  Do not edit by hand.

/*
    bernadette is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bernadette is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bernadette.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_seeiir_mbm_cp_halfnormal_volatilities_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_seeiir_mbm_cp_halfnormal_volatilities");
    reader.add_event(420, 418, "end", "model_seeiir_mbm_cp_halfnormal_volatilities");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
to_triangular(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const int& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        validate_non_negative_index("y", "K", K);
        validate_non_negative_index("y", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(K, K);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,rep_matrix(0.0, K, K));
        current_statement_begin__ = 6;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 8;
        for (int col = 1; col <= K; ++col) {
            current_statement_begin__ = 9;
            for (int row = col; row <= K; ++row) {
                current_statement_begin__ = 10;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(row), stan::model::cons_list(stan::model::index_uni(col), stan::model::nil_index_list())), 
                            get_base1(x, pos, "x", 1), 
                            "assigning variable y");
                current_statement_begin__ = 11;
                stan::math::assign(pos, (pos + 1));
            }
        }
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct to_triangular_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const int& K, std::ostream* pstream__) const {
        return to_triangular(x, K, pstream__);
    }
};
template <typename T0__>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
rep_each(const std::vector<T0__>& x,
             const int& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,size(x));
        current_statement_begin__ = 20;
        validate_non_negative_index("y", "(N * K)", (N * K));
        std::vector<local_scalar_t__  > y((N * K), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 21;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 23;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 24;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 25;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                            get_base1(x, n, "x", 1), 
                            "assigning variable y");
                current_statement_begin__ = 26;
                stan::math::assign(pos, (pos + 1));
            }
        }
        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rep_each_functor__ {
    template <typename T0__>
        std::vector<typename boost::math::tools::promote_args<T0__>::type>
    operator()(const std::vector<T0__>& x,
             const int& K, std::ostream* pstream__) const {
        return rep_each(x, K, pstream__);
    }
};
template <typename T0__>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
to_vector_rowwise(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        validate_non_negative_index("res", "num_elements(x)", num_elements(x));
        std::vector<local_scalar_t__  > res(num_elements(x), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 35;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 36;
        int m(0);
        (void) m;  // dummy to suppress unused var warning
        stan::math::fill(m, std::numeric_limits<int>::min());
        current_statement_begin__ = 38;
        stan::math::assign(n, rows(x));
        current_statement_begin__ = 39;
        stan::math::assign(m, cols(x));
        current_statement_begin__ = 41;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 41;
            for (int j = 1; j <= m; ++j) {
                current_statement_begin__ = 41;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * m) + j)), stan::model::nil_index_list()), 
                            get_base1(x, i, j, "x", 1), 
                            "assigning variable res");
            }
        }
        current_statement_begin__ = 43;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct to_vector_rowwise_functor__ {
    template <typename T0__>
        std::vector<typename boost::math::tools::promote_args<T0__>::type>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return to_vector_rowwise(x, pstream__);
    }
};
template <typename T0__>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
to_vector_colwise(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 48;
        validate_non_negative_index("res", "num_elements(x)", num_elements(x));
        std::vector<local_scalar_t__  > res(num_elements(x), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 49;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 50;
        int m(0);
        (void) m;  // dummy to suppress unused var warning
        stan::math::fill(m, std::numeric_limits<int>::min());
        current_statement_begin__ = 52;
        stan::math::assign(n, rows(x));
        current_statement_begin__ = 53;
        stan::math::assign(m, cols(x));
        current_statement_begin__ = 55;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 55;
            for (int j = 1; j <= m; ++j) {
                current_statement_begin__ = 55;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(((n * (j - 1)) + i)), stan::model::nil_index_list()), 
                            get_base1(x, i, j, "x", 1), 
                            "assigning variable res");
            }
        }
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct to_vector_colwise_functor__ {
    template <typename T0__>
        std::vector<typename boost::math::tools::promote_args<T0__>::type>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return to_vector_colwise(x, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
ODE_states(const T0__& time,
               const std::vector<T1__>& y,
               const std::vector<T2__>& theta,
               const std::vector<T3__>& x_r,
               const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 67;
        int A(0);
        (void) A;  // dummy to suppress unused var warning
        stan::math::fill(A, std::numeric_limits<int>::min());
        stan::math::assign(A,get_base1(x_i, 1, "x_i", 1));
        current_statement_begin__ = 68;
        int n_obs(0);
        (void) n_obs;  // dummy to suppress unused var warning
        stan::math::fill(n_obs, std::numeric_limits<int>::min());
        stan::math::assign(n_obs,get_base1(x_i, 2, "x_i", 1));
        current_statement_begin__ = 69;
        int n_difeq(0);
        (void) n_difeq;  // dummy to suppress unused var warning
        stan::math::fill(n_difeq, std::numeric_limits<int>::min());
        stan::math::assign(n_difeq,get_base1(x_i, 3, "x_i", 1));
        current_statement_begin__ = 71;
        validate_non_negative_index("dy_dt", "(A * n_difeq)", (A * n_difeq));
        std::vector<local_scalar_t__  > dy_dt((A * n_difeq), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dy_dt, DUMMY_VAR__);
        stan::math::fill(dy_dt, DUMMY_VAR__);
        current_statement_begin__ = 72;
        validate_non_negative_index("f_inf", "A", A);
        std::vector<local_scalar_t__  > f_inf(A, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(f_inf, DUMMY_VAR__);
        stan::math::fill(f_inf, DUMMY_VAR__);
        current_statement_begin__ = 73;
        validate_non_negative_index("init", "(2 * A)", (2 * A));
        std::vector<local_scalar_t__  > init((2 * A), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(init, DUMMY_VAR__);
        stan::math::fill(init, DUMMY_VAR__);
        current_statement_begin__ = 75;
        validate_non_negative_index("age_dist", "A", A);
        std::vector<local_scalar_t__  > age_dist(A, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(age_dist, DUMMY_VAR__);
        stan::math::fill(age_dist, DUMMY_VAR__);
        stan::math::assign(age_dist,stan::model::rvalue(x_r, stan::model::cons_list(stan::model::index_min_max(((2 * n_obs) + 1), ((2 * n_obs) + A)), stan::model::nil_index_list()), "x_r"));
        current_statement_begin__ = 78;
        validate_non_negative_index("contact", "(A * A)", (A * A));
        std::vector<local_scalar_t__  > contact((A * A), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(contact, DUMMY_VAR__);
        stan::math::fill(contact, DUMMY_VAR__);
        stan::math::assign(contact,stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (A * A)), stan::model::nil_index_list()), "theta"));
        current_statement_begin__ = 80;
        local_scalar_t__ gamma(DUMMY_VAR__);
        (void) gamma;  // dummy to suppress unused var warning
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma, DUMMY_VAR__);
        stan::math::assign(gamma,get_base1(theta, ((A * A) + 1), "theta", 1));
        current_statement_begin__ = 81;
        local_scalar_t__ tau(DUMMY_VAR__);
        (void) tau;  // dummy to suppress unused var warning
        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau, DUMMY_VAR__);
        stan::math::assign(tau,get_base1(theta, ((A * A) + 2), "theta", 1));
        current_statement_begin__ = 83;
        local_scalar_t__ pi(DUMMY_VAR__);
        (void) pi;  // dummy to suppress unused var warning
        stan::math::initialize(pi, DUMMY_VAR__);
        stan::math::fill(pi, DUMMY_VAR__);
        stan::math::assign(pi,get_base1(theta, ((A * A) + 3), "theta", 1));
        current_statement_begin__ = 84;
        validate_non_negative_index("beta", "A", A);
        std::vector<local_scalar_t__  > beta(A, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(((A * A) + 4), (((A * A) + A) + 3)), stan::model::nil_index_list()), "theta"));
        current_statement_begin__ = 87;
        for (int i = 1; i <= A; ++i) {
            current_statement_begin__ = 89;
            stan::model::assign(init, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(age_dist, i, "age_dist", 1) * (1 - pi)), 
                        "assigning variable init");
            current_statement_begin__ = 90;
            stan::model::assign(init, 
                        stan::model::cons_list(stan::model::index_uni((A + i)), stan::model::nil_index_list()), 
                        (get_base1(age_dist, i, "age_dist", 1) * pi), 
                        "assigning variable init");
            current_statement_begin__ = 93;
            stan::model::assign(f_inf, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        sum(elt_multiply(elt_divide(elt_multiply(to_vector(beta), add(to_vector(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(((3 * A) + 1), (4 * A)), stan::model::nil_index_list()), "y")), to_vector(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(((4 * A) + 1), (5 * A)), stan::model::nil_index_list()), "y")))), to_vector(age_dist)), to_vector(stan::model::rvalue(contact, stan::model::cons_list(stan::model::index_min_max(((A * (i - 1)) + 1), (i * A)), stan::model::nil_index_list()), "contact")))), 
                        "assigning variable f_inf");
            current_statement_begin__ = 99;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (-(get_base1(f_inf, i, "f_inf", 1)) * (get_base1(y, i, "y", 1) + get_base1(init, i, "init", 1))), 
                        "assigning variable dy_dt");
            current_statement_begin__ = 102;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni((A + i)), stan::model::nil_index_list()), 
                        ((get_base1(f_inf, i, "f_inf", 1) * (get_base1(y, i, "y", 1) + get_base1(init, i, "init", 1))) - (tau * (get_base1(y, (A + i), "y", 1) + get_base1(init, (A + i), "init", 1)))), 
                        "assigning variable dy_dt");
            current_statement_begin__ = 105;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni(((2 * A) + i)), stan::model::nil_index_list()), 
                        (tau * ((get_base1(y, (A + i), "y", 1) + get_base1(init, (A + i), "init", 1)) - get_base1(y, ((2 * A) + i), "y", 1))), 
                        "assigning variable dy_dt");
            current_statement_begin__ = 108;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni(((3 * A) + i)), stan::model::nil_index_list()), 
                        ((tau * get_base1(y, ((2 * A) + i), "y", 1)) - (gamma * get_base1(y, ((3 * A) + i), "y", 1))), 
                        "assigning variable dy_dt");
            current_statement_begin__ = 111;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni(((4 * A) + i)), stan::model::nil_index_list()), 
                        (gamma * (get_base1(y, ((3 * A) + i), "y", 1) - (gamma * get_base1(y, ((4 * A) + i), "y", 1)))), 
                        "assigning variable dy_dt");
            current_statement_begin__ = 114;
            stan::model::assign(dy_dt, 
                        stan::model::cons_list(stan::model::index_uni((((n_difeq - 1) * A) + i)), stan::model::nil_index_list()), 
                        (tau * get_base1(y, ((2 * A) + i), "y", 1)), 
                        "assigning variable dy_dt");
        }
        current_statement_begin__ = 118;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dy_dt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ODE_states_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& time,
               const std::vector<T1__>& y,
               const std::vector<T2__>& theta,
               const std::vector<T3__>& x_r,
               const std::vector<int>& x_i, std::ostream* pstream__) const {
        return ODE_states(time, y, theta, x_r, x_i, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type> >
integrate_ode_trapezoidal(const std::vector<T0__>& y_initial,
                              const T1__& initial_time,
                              const std::vector<T2__>& times,
                              const std::vector<T3__>& theta,
                              const std::vector<T4__>& x_r,
                              const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 131;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 132;
        validate_non_negative_index("dy_dt_initial_time", "size(y_initial)", size(y_initial));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dy_dt_initial_time(size(y_initial));
        stan::math::initialize(dy_dt_initial_time, DUMMY_VAR__);
        stan::math::fill(dy_dt_initial_time, DUMMY_VAR__);
        current_statement_begin__ = 133;
        validate_non_negative_index("dy_dt_t", "size(y_initial)", size(y_initial));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dy_dt_t(size(y_initial));
        stan::math::initialize(dy_dt_t, DUMMY_VAR__);
        stan::math::fill(dy_dt_t, DUMMY_VAR__);
        current_statement_begin__ = 134;
        validate_non_negative_index("k", "size(y_initial)", size(y_initial));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> k(size(y_initial));
        stan::math::initialize(k, DUMMY_VAR__);
        stan::math::fill(k, DUMMY_VAR__);
        current_statement_begin__ = 136;
        validate_non_negative_index("y_approx", "size(times)", size(times));
        validate_non_negative_index("y_approx", "size(y_initial)", size(y_initial));
        std::vector<std::vector<local_scalar_t__  >  > y_approx(size(times), std::vector<local_scalar_t__>(size(y_initial), local_scalar_t__(DUMMY_VAR__)));
        stan::math::initialize(y_approx, DUMMY_VAR__);
        stan::math::fill(y_approx, DUMMY_VAR__);
        current_statement_begin__ = 138;
        int A(0);
        (void) A;  // dummy to suppress unused var warning
        stan::math::fill(A, std::numeric_limits<int>::min());
        stan::math::assign(A,get_base1(x_i, 1, "x_i", 1));
        current_statement_begin__ = 139;
        int n_obs(0);
        (void) n_obs;  // dummy to suppress unused var warning
        stan::math::fill(n_obs, std::numeric_limits<int>::min());
        stan::math::assign(n_obs,get_base1(x_i, 2, "x_i", 1));
        current_statement_begin__ = 140;
        validate_non_negative_index("theta_ODE", "(((A * A) + A) + 3)", (((A * A) + A) + 3));
        std::vector<local_scalar_t__  > theta_ODE((((A * A) + A) + 3), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(theta_ODE, DUMMY_VAR__);
        stan::math::fill(theta_ODE, DUMMY_VAR__);
        current_statement_begin__ = 142;
        validate_non_negative_index("left_t", "n_obs", n_obs);
        std::vector<local_scalar_t__  > left_t(n_obs, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(left_t, DUMMY_VAR__);
        stan::math::fill(left_t, DUMMY_VAR__);
        stan::math::assign(left_t,stan::model::rvalue(x_r, stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list()), "x_r"));
        current_statement_begin__ = 143;
        validate_non_negative_index("right_t", "n_obs", n_obs);
        std::vector<local_scalar_t__  > right_t(n_obs, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(right_t, DUMMY_VAR__);
        stan::math::fill(right_t, DUMMY_VAR__);
        stan::math::assign(right_t,stan::model::rvalue(x_r, stan::model::cons_list(stan::model::index_min_max((n_obs + 1), (2 * n_obs)), stan::model::nil_index_list()), "x_r"));
        current_statement_begin__ = 144;
        validate_non_negative_index("beta_N_temp", "(A * n_obs)", (A * n_obs));
        std::vector<local_scalar_t__  > beta_N_temp((A * n_obs), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(beta_N_temp, DUMMY_VAR__);
        stan::math::fill(beta_N_temp, DUMMY_VAR__);
        stan::math::assign(beta_N_temp,stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(((A * A) + 3), (((A * n_obs) + (A * A)) + 2)), stan::model::nil_index_list()), "theta"));
        current_statement_begin__ = 147;
        stan::model::assign(theta_ODE, 
                    stan::model::cons_list(stan::model::index_min_max(1, (A * A)), stan::model::nil_index_list()), 
                    stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (A * A)), stan::model::nil_index_list()), "theta"), 
                    "assigning variable theta_ODE");
        current_statement_begin__ = 148;
        stan::model::assign(theta_ODE, 
                    stan::model::cons_list(stan::model::index_uni(((A * A) + 1)), stan::model::nil_index_list()), 
                    get_base1(theta, ((A * A) + 1), "theta", 1), 
                    "assigning variable theta_ODE");
        current_statement_begin__ = 149;
        stan::model::assign(theta_ODE, 
                    stan::model::cons_list(stan::model::index_uni(((A * A) + 2)), stan::model::nil_index_list()), 
                    get_base1(theta, (((A * n_obs) + (A * A)) + 4), "theta", 1), 
                    "assigning variable theta_ODE");
        current_statement_begin__ = 150;
        stan::model::assign(theta_ODE, 
                    stan::model::cons_list(stan::model::index_uni(((A * A) + 3)), stan::model::nil_index_list()), 
                    get_base1(theta, (((A * n_obs) + (A * A)) + 3), "theta", 1), 
                    "assigning variable theta_ODE");
        current_statement_begin__ = 152;
        for (int t = 0; t <= (size(times) - 1); ++t) {
            current_statement_begin__ = 153;
            if (as_bool(logical_eq(t, 0))) {
                current_statement_begin__ = 155;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 155;
                    stan::model::assign(theta_ODE, 
                                stan::model::cons_list(stan::model::index_uni((((A * A) + 3) + j)), stan::model::nil_index_list()), 
                                get_base1(theta, ((A * A) + 2), "theta", 1), 
                                "assigning variable theta_ODE");
                }
                current_statement_begin__ = 157;
                stan::math::assign(h, (get_base1(times, 1, "times", 1) - initial_time));
                current_statement_begin__ = 158;
                stan::math::assign(dy_dt_initial_time, to_vector(ODE_states(initial_time, y_initial, theta_ODE, x_r, x_i, pstream__)));
                current_statement_begin__ = 159;
                stan::math::assign(k, multiply(h, dy_dt_initial_time));
                current_statement_begin__ = 161;
                stan::model::assign(y_approx, 
                            stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_array_1d(add(to_vector(y_initial), divide(multiply(h, add(dy_dt_initial_time, to_vector(ODE_states(get_base1(times, 1, "times", 1), to_array_1d(add(to_vector(y_initial), k)), theta_ODE, x_r, x_i, pstream__)))), 2))), 
                            "assigning variable y_approx");
            } else {
                current_statement_begin__ = 169;
                stan::math::assign(h, (get_base1(times, (t + 1), "times", 1) - get_base1(times, t, "times", 1)));
                current_statement_begin__ = 171;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 173;
                    if (as_bool(logical_eq(t, (size(times) - 1)))) {
                        current_statement_begin__ = 173;
                        stan::model::assign(theta_ODE, 
                                    stan::model::cons_list(stan::model::index_uni((((A * A) + 3) + j)), stan::model::nil_index_list()), 
                                    get_base1(beta_N_temp, (((n_obs * (j - 1)) + t) + 1), "beta_N_temp", 1), 
                                    "assigning variable theta_ODE");
                    } else if (as_bool((primitive_value(logical_gte(t, get_base1(left_t, t, "left_t", 1))) && primitive_value(logical_lte(t, get_base1(right_t, t, "right_t", 1)))))) {
                        current_statement_begin__ = 174;
                        stan::model::assign(theta_ODE, 
                                    stan::model::cons_list(stan::model::index_uni((((A * A) + 3) + j)), stan::model::nil_index_list()), 
                                    get_base1(beta_N_temp, ((n_obs * (j - 1)) + t), "beta_N_temp", 1), 
                                    "assigning variable theta_ODE");
                    }
                }
                current_statement_begin__ = 177;
                stan::math::assign(dy_dt_t, to_vector(ODE_states(get_base1(times, t, "times", 1), get_base1(y_approx, t, "y_approx", 1), theta_ODE, x_r, x_i, pstream__)));
                current_statement_begin__ = 179;
                stan::math::assign(k, multiply(h, dy_dt_t));
                current_statement_begin__ = 181;
                stan::model::assign(y_approx, 
                            stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(to_array_1d(add(to_vector(stan::model::rvalue(y_approx, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y_approx")), divide(multiply(h, add(dy_dt_t, to_vector(ODE_states(get_base1(times, (t + 1), "times", 1), to_array_1d(add(to_vector(stan::model::rvalue(y_approx, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y_approx")), k)), theta_ODE, x_r, x_i, pstream__)))), 2)))), 
                            "assigning variable y_approx");
            }
        }
        current_statement_begin__ = 191;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y_approx);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct integrate_ode_trapezoidal_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type> >
    operator()(const std::vector<T0__>& y_initial,
                              const T1__& initial_time,
                              const std::vector<T2__>& times,
                              const std::vector<T3__>& theta,
                              const std::vector<T4__>& x_r,
                              const std::vector<int>& x_i, std::ostream* pstream__) const {
        return integrate_ode_trapezoidal(y_initial, initial_time, times, theta, x_r, x_i, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_seeiir_mbm_cp_halfnormal_volatilities
  : public stan::model::model_base_crtp<model_seeiir_mbm_cp_halfnormal_volatilities> {
private:
        int A;
        int n_obs;
        int n_weeks;
        int n_pop;
        std::vector<double> age_dist;
        vector_d pop_diag;
        int n_difeq;
        std::vector<vector_d> L_cm;
        std::vector<double> ifr_age;
        double t0;
        std::vector<double> ts;
        std::vector<double> left_t;
        std::vector<double> right_t;
        vector_d I_D;
        row_vector_d E_deathsByAge_day1;
        std::vector<std::vector<int> > y_deaths;
        double dE;
        double dI;
        double eta0_sd;
        double p_phi;
        double p_sigmaCM;
        std::vector<double> p_sigmaBM;
        matrix_d p_pi;
        int inference;
        int doprint;
        vector_d I_D_rev;
        std::vector<int> x_i;
        std::vector<double> x_r;
        double gamma;
        double tau;
        std::vector<double> init;
        vector_d ones_vector_A;
        vector_d L_vector;
public:
    model_seeiir_mbm_cp_halfnormal_volatilities(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_seeiir_mbm_cp_halfnormal_volatilities(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_seeiir_mbm_cp_halfnormal_volatilities_namespace::model_seeiir_mbm_cp_halfnormal_volatilities";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 198;
            context__.validate_dims("data initialization", "A", "int", context__.to_vec());
            A = int(0);
            vals_i__ = context__.vals_i("A");
            pos__ = 0;
            A = vals_i__[pos__++];
            check_greater_or_equal(function__, "A", A, 1);
            current_statement_begin__ = 199;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obs", n_obs, 1);
            current_statement_begin__ = 200;
            context__.validate_dims("data initialization", "n_weeks", "int", context__.to_vec());
            n_weeks = int(0);
            vals_i__ = context__.vals_i("n_weeks");
            pos__ = 0;
            n_weeks = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_weeks", n_weeks, 1);
            current_statement_begin__ = 202;
            context__.validate_dims("data initialization", "n_pop", "int", context__.to_vec());
            n_pop = int(0);
            vals_i__ = context__.vals_i("n_pop");
            pos__ = 0;
            n_pop = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pop", n_pop, 1);
            current_statement_begin__ = 203;
            validate_non_negative_index("age_dist", "A", A);
            context__.validate_dims("data initialization", "age_dist", "double", context__.to_vec(A));
            age_dist = std::vector<double>(A, double(0));
            vals_r__ = context__.vals_r("age_dist");
            pos__ = 0;
            size_t age_dist_k_0_max__ = A;
            for (size_t k_0__ = 0; k_0__ < age_dist_k_0_max__; ++k_0__) {
                age_dist[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 204;
            validate_non_negative_index("pop_diag", "A", A);
            context__.validate_dims("data initialization", "pop_diag", "vector_d", context__.to_vec(A));
            pop_diag = Eigen::Matrix<double, Eigen::Dynamic, 1>(A);
            vals_r__ = context__.vals_r("pop_diag");
            pos__ = 0;
            size_t pop_diag_j_1_max__ = A;
            for (size_t j_1__ = 0; j_1__ < pop_diag_j_1_max__; ++j_1__) {
                pop_diag(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 206;
            context__.validate_dims("data initialization", "n_difeq", "int", context__.to_vec());
            n_difeq = int(0);
            vals_i__ = context__.vals_i("n_difeq");
            pos__ = 0;
            n_difeq = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_difeq", n_difeq, 1);
            current_statement_begin__ = 208;
            validate_non_negative_index("L_cm", "A", A);
            validate_non_negative_index("L_cm", "A", A);
            context__.validate_dims("data initialization", "L_cm", "vector_d", context__.to_vec(A,A));
            L_cm = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(A, Eigen::Matrix<double, Eigen::Dynamic, 1>(A));
            vals_r__ = context__.vals_r("L_cm");
            pos__ = 0;
            size_t L_cm_j_1_max__ = A;
            size_t L_cm_k_0_max__ = A;
            for (size_t j_1__ = 0; j_1__ < L_cm_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_cm_k_0_max__; ++k_0__) {
                    L_cm[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 209;
            validate_non_negative_index("ifr_age", "A", A);
            context__.validate_dims("data initialization", "ifr_age", "double", context__.to_vec(A));
            ifr_age = std::vector<double>(A, double(0));
            vals_r__ = context__.vals_r("ifr_age");
            pos__ = 0;
            size_t ifr_age_k_0_max__ = A;
            for (size_t k_0__ = 0; k_0__ < ifr_age_k_0_max__; ++k_0__) {
                ifr_age[k_0__] = vals_r__[pos__++];
            }
            size_t ifr_age_i_0_max__ = A;
            for (size_t i_0__ = 0; i_0__ < ifr_age_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ifr_age[i_0__]", ifr_age[i_0__], 0);
            }
            current_statement_begin__ = 211;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            current_statement_begin__ = 212;
            validate_non_negative_index("ts", "n_obs", n_obs);
            context__.validate_dims("data initialization", "ts", "double", context__.to_vec(n_obs));
            ts = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("ts");
            pos__ = 0;
            size_t ts_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < ts_k_0_max__; ++k_0__) {
                ts[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 213;
            validate_non_negative_index("left_t", "n_obs", n_obs);
            context__.validate_dims("data initialization", "left_t", "double", context__.to_vec(n_obs));
            left_t = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("left_t");
            pos__ = 0;
            size_t left_t_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < left_t_k_0_max__; ++k_0__) {
                left_t[k_0__] = vals_r__[pos__++];
            }
            size_t left_t_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < left_t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "left_t[i_0__]", left_t[i_0__], 0);
            }
            current_statement_begin__ = 214;
            validate_non_negative_index("right_t", "n_obs", n_obs);
            context__.validate_dims("data initialization", "right_t", "double", context__.to_vec(n_obs));
            right_t = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("right_t");
            pos__ = 0;
            size_t right_t_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < right_t_k_0_max__; ++k_0__) {
                right_t[k_0__] = vals_r__[pos__++];
            }
            size_t right_t_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < right_t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "right_t[i_0__]", right_t[i_0__], 0);
            }
            current_statement_begin__ = 215;
            validate_non_negative_index("I_D", "n_obs", n_obs);
            context__.validate_dims("data initialization", "I_D", "vector_d", context__.to_vec(n_obs));
            I_D = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            vals_r__ = context__.vals_r("I_D");
            pos__ = 0;
            size_t I_D_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < I_D_j_1_max__; ++j_1__) {
                I_D(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "I_D", I_D, 0);
            current_statement_begin__ = 216;
            validate_non_negative_index("E_deathsByAge_day1", "A", A);
            context__.validate_dims("data initialization", "E_deathsByAge_day1", "row_vector_d", context__.to_vec(A));
            E_deathsByAge_day1 = Eigen::Matrix<double, 1, Eigen::Dynamic>(A);
            vals_r__ = context__.vals_r("E_deathsByAge_day1");
            pos__ = 0;
            size_t E_deathsByAge_day1_j_1_max__ = A;
            for (size_t j_1__ = 0; j_1__ < E_deathsByAge_day1_j_1_max__; ++j_1__) {
                E_deathsByAge_day1(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 219;
            validate_non_negative_index("y_deaths", "n_obs", n_obs);
            validate_non_negative_index("y_deaths", "A", A);
            context__.validate_dims("data initialization", "y_deaths", "int", context__.to_vec(n_obs,A));
            y_deaths = std::vector<std::vector<int> >(n_obs, std::vector<int>(A, int(0)));
            vals_i__ = context__.vals_i("y_deaths");
            pos__ = 0;
            size_t y_deaths_k_0_max__ = n_obs;
            size_t y_deaths_k_1_max__ = A;
            for (size_t k_1__ = 0; k_1__ < y_deaths_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_deaths_k_0_max__; ++k_0__) {
                    y_deaths[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 222;
            context__.validate_dims("data initialization", "dE", "double", context__.to_vec());
            dE = double(0);
            vals_r__ = context__.vals_r("dE");
            pos__ = 0;
            dE = vals_r__[pos__++];
            current_statement_begin__ = 223;
            context__.validate_dims("data initialization", "dI", "double", context__.to_vec());
            dI = double(0);
            vals_r__ = context__.vals_r("dI");
            pos__ = 0;
            dI = vals_r__[pos__++];
            current_statement_begin__ = 226;
            context__.validate_dims("data initialization", "eta0_sd", "double", context__.to_vec());
            eta0_sd = double(0);
            vals_r__ = context__.vals_r("eta0_sd");
            pos__ = 0;
            eta0_sd = vals_r__[pos__++];
            current_statement_begin__ = 227;
            context__.validate_dims("data initialization", "p_phi", "double", context__.to_vec());
            p_phi = double(0);
            vals_r__ = context__.vals_r("p_phi");
            pos__ = 0;
            p_phi = vals_r__[pos__++];
            current_statement_begin__ = 228;
            context__.validate_dims("data initialization", "p_sigmaCM", "double", context__.to_vec());
            p_sigmaCM = double(0);
            vals_r__ = context__.vals_r("p_sigmaCM");
            pos__ = 0;
            p_sigmaCM = vals_r__[pos__++];
            current_statement_begin__ = 229;
            validate_non_negative_index("p_sigmaBM", "A", A);
            context__.validate_dims("data initialization", "p_sigmaBM", "double", context__.to_vec(A));
            p_sigmaBM = std::vector<double>(A, double(0));
            vals_r__ = context__.vals_r("p_sigmaBM");
            pos__ = 0;
            size_t p_sigmaBM_k_0_max__ = A;
            for (size_t k_0__ = 0; k_0__ < p_sigmaBM_k_0_max__; ++k_0__) {
                p_sigmaBM[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 230;
            validate_non_negative_index("p_pi", "1", 1);
            validate_non_negative_index("p_pi", "2", 2);
            context__.validate_dims("data initialization", "p_pi", "matrix_d", context__.to_vec(1,2));
            p_pi = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(1, 2);
            vals_r__ = context__.vals_r("p_pi");
            pos__ = 0;
            size_t p_pi_j_2_max__ = 2;
            size_t p_pi_j_1_max__ = 1;
            for (size_t j_2__ = 0; j_2__ < p_pi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_pi_j_1_max__; ++j_1__) {
                    p_pi(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "p_pi", p_pi, 0);
            current_statement_begin__ = 233;
            context__.validate_dims("data initialization", "inference", "int", context__.to_vec());
            inference = int(0);
            vals_i__ = context__.vals_i("inference");
            pos__ = 0;
            inference = vals_i__[pos__++];
            current_statement_begin__ = 234;
            context__.validate_dims("data initialization", "doprint", "int", context__.to_vec());
            doprint = int(0);
            vals_i__ = context__.vals_i("doprint");
            pos__ = 0;
            doprint = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 238;
            validate_non_negative_index("I_D_rev", "n_obs", n_obs);
            I_D_rev = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            stan::math::fill(I_D_rev, DUMMY_VAR__);
            current_statement_begin__ = 240;
            validate_non_negative_index("x_i", "3", 3);
            x_i = std::vector<int>(3, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());
            current_statement_begin__ = 241;
            validate_non_negative_index("x_r", "((2 * n_obs) + A)", ((2 * n_obs) + A));
            x_r = std::vector<double>(((2 * n_obs) + A), double(0));
            stan::math::fill(x_r, DUMMY_VAR__);
            current_statement_begin__ = 242;
            gamma = double(0);
            stan::math::fill(gamma, DUMMY_VAR__);
            current_statement_begin__ = 243;
            tau = double(0);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 245;
            validate_non_negative_index("init", "(A * n_difeq)", (A * n_difeq));
            init = std::vector<double>((A * n_difeq), double(0));
            stan::math::fill(init, DUMMY_VAR__);
            stan::math::assign(init,rep_array(0.0, (A * n_difeq)));
            current_statement_begin__ = 247;
            validate_non_negative_index("ones_vector_A", "A", A);
            ones_vector_A = Eigen::Matrix<double, Eigen::Dynamic, 1>(A);
            stan::math::fill(ones_vector_A, DUMMY_VAR__);
            stan::math::assign(ones_vector_A,rep_vector(1.0, A));
            current_statement_begin__ = 249;
            validate_non_negative_index("L_vector", "divide((A * (A + 1)), 2)", divide((A * (A + 1)), 2));
            L_vector = Eigen::Matrix<double, Eigen::Dynamic, 1>(divide((A * (A + 1)), 2));
            stan::math::fill(L_vector, DUMMY_VAR__);
            stan::math::assign(L_vector,rep_vector(0, divide((A * (A + 1)), 2)));
            // execute transformed data statements
            current_statement_begin__ = 251;
            for (int i = 1; i <= n_obs; ++i) {
                current_statement_begin__ = 251;
                stan::model::assign(I_D_rev, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(I_D, ((n_obs - i) + 1), "I_D", 1), 
                            "assigning variable I_D_rev");
            }
            current_statement_begin__ = 253;
            stan::model::assign(x_i, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        A, 
                        "assigning variable x_i");
            current_statement_begin__ = 254;
            stan::model::assign(x_i, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        n_obs, 
                        "assigning variable x_i");
            current_statement_begin__ = 255;
            stan::model::assign(x_i, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        n_difeq, 
                        "assigning variable x_i");
            current_statement_begin__ = 257;
            stan::model::assign(x_r, 
                        stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list()), 
                        left_t, 
                        "assigning variable x_r");
            current_statement_begin__ = 258;
            stan::model::assign(x_r, 
                        stan::model::cons_list(stan::model::index_min_max((n_obs + 1), (2 * n_obs)), stan::model::nil_index_list()), 
                        right_t, 
                        "assigning variable x_r");
            current_statement_begin__ = 259;
            stan::model::assign(x_r, 
                        stan::model::cons_list(stan::model::index_min_max(((2 * n_obs) + 1), ((2 * n_obs) + A)), stan::model::nil_index_list()), 
                        age_dist, 
                        "assigning variable x_r");
            current_statement_begin__ = 261;
            stan::math::assign(gamma, (2.0 / dI));
            current_statement_begin__ = 262;
            stan::math::assign(tau, (2.0 / dE));
            // validate transformed data
            current_statement_begin__ = 238;
            check_greater_or_equal(function__, "I_D_rev", I_D_rev, 0);
            current_statement_begin__ = 242;
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 243;
            check_greater_or_equal(function__, "tau", tau, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 266;
            num_params_r__ += 1;
            current_statement_begin__ = 267;
            validate_non_negative_index("eta_init", "A", A);
            num_params_r__ += (1 * A);
            current_statement_begin__ = 268;
            validate_non_negative_index("eta_noise", "((n_weeks - 1) * A)", ((n_weeks - 1) * A));
            num_params_r__ += (1 * ((n_weeks - 1) * A));
            current_statement_begin__ = 270;
            num_params_r__ += 1;
            current_statement_begin__ = 272;
            validate_non_negative_index("sigmaBM", "A", A);
            num_params_r__ += (1 * A);
            current_statement_begin__ = 273;
            num_params_r__ += 1;
            current_statement_begin__ = 275;
            validate_non_negative_index("L_raw", "divide((A * (A + 1)), 2)", divide((A * (A + 1)), 2));
            num_params_r__ += divide((A * (A + 1)), 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_seeiir_mbm_cp_halfnormal_volatilities() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 266;
        if (!(context__.contains_r("eta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "eta0", "double", context__.to_vec());
        double eta0(0);
        eta0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(eta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 267;
        if (!(context__.contains_r("eta_init")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_init missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_init");
        pos__ = 0U;
        validate_non_negative_index("eta_init", "A", A);
        context__.validate_dims("parameter initialization", "eta_init", "double", context__.to_vec(A));
        std::vector<double> eta_init(A, double(0));
        size_t eta_init_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < eta_init_k_0_max__; ++k_0__) {
            eta_init[k_0__] = vals_r__[pos__++];
        }
        size_t eta_init_i_0_max__ = A;
        for (size_t i_0__ = 0; i_0__ < eta_init_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(eta_init[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_init: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 268;
        if (!(context__.contains_r("eta_noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_noise");
        pos__ = 0U;
        validate_non_negative_index("eta_noise", "((n_weeks - 1) * A)", ((n_weeks - 1) * A));
        context__.validate_dims("parameter initialization", "eta_noise", "double", context__.to_vec(((n_weeks - 1) * A)));
        std::vector<double> eta_noise(((n_weeks - 1) * A), double(0));
        size_t eta_noise_k_0_max__ = ((n_weeks - 1) * A);
        for (size_t k_0__ = 0; k_0__ < eta_noise_k_0_max__; ++k_0__) {
            eta_noise[k_0__] = vals_r__[pos__++];
        }
        size_t eta_noise_i_0_max__ = ((n_weeks - 1) * A);
        for (size_t i_0__ = 0; i_0__ < eta_noise_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(eta_noise[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_noise: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 270;
        if (!(context__.contains_r("pi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "pi", "double", context__.to_vec());
        double pi(0);
        pi = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, pi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 272;
        if (!(context__.contains_r("sigmaBM")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaBM missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaBM");
        pos__ = 0U;
        validate_non_negative_index("sigmaBM", "A", A);
        context__.validate_dims("parameter initialization", "sigmaBM", "double", context__.to_vec(A));
        std::vector<double> sigmaBM(A, double(0));
        size_t sigmaBM_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < sigmaBM_k_0_max__; ++k_0__) {
            sigmaBM[k_0__] = vals_r__[pos__++];
        }
        size_t sigmaBM_i_0_max__ = A;
        for (size_t i_0__ = 0; i_0__ < sigmaBM_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigmaBM[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaBM: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 273;
        if (!(context__.contains_r("phiD")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phiD missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phiD");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phiD", "double", context__.to_vec());
        double phiD(0);
        phiD = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phiD);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phiD: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 275;
        if (!(context__.contains_r("L_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_raw");
        pos__ = 0U;
        validate_non_negative_index("L_raw", "divide((A * (A + 1)), 2)", divide((A * (A + 1)), 2));
        context__.validate_dims("parameter initialization", "L_raw", "vector_d", context__.to_vec(divide((A * (A + 1)), 2)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_raw(divide((A * (A + 1)), 2));
        size_t L_raw_j_1_max__ = divide((A * (A + 1)), 2);
        for (size_t j_1__ = 0; j_1__ < L_raw_j_1_max__; ++j_1__) {
            L_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(L_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 266;
            local_scalar_t__ eta0;
            (void) eta0;  // dummy to suppress unused var warning
            if (jacobian__)
                eta0 = in__.scalar_constrain(lp__);
            else
                eta0 = in__.scalar_constrain();
            current_statement_begin__ = 267;
            std::vector<local_scalar_t__> eta_init;
            size_t eta_init_d_0_max__ = A;
            eta_init.reserve(eta_init_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_init_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta_init.push_back(in__.scalar_constrain(lp__));
                else
                    eta_init.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 268;
            std::vector<local_scalar_t__> eta_noise;
            size_t eta_noise_d_0_max__ = ((n_weeks - 1) * A);
            eta_noise.reserve(eta_noise_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_noise_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta_noise.push_back(in__.scalar_constrain(lp__));
                else
                    eta_noise.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 270;
            local_scalar_t__ pi;
            (void) pi;  // dummy to suppress unused var warning
            if (jacobian__)
                pi = in__.scalar_lub_constrain(0, 1, lp__);
            else
                pi = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 272;
            std::vector<local_scalar_t__> sigmaBM;
            size_t sigmaBM_d_0_max__ = A;
            sigmaBM.reserve(sigmaBM_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigmaBM_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigmaBM.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigmaBM.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 273;
            local_scalar_t__ phiD;
            (void) phiD;  // dummy to suppress unused var warning
            if (jacobian__)
                phiD = in__.scalar_lb_constrain(0, lp__);
            else
                phiD = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 275;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_raw;
            (void) L_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                L_raw = in__.vector_constrain(divide((A * (A + 1)), 2), lp__);
            else
                L_raw = in__.vector_constrain(divide((A * (A + 1)), 2));
            // transformed parameters
            current_statement_begin__ = 280;
            validate_non_negative_index("eta_weekly", "n_weeks", n_weeks);
            validate_non_negative_index("eta_weekly", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_weekly(n_weeks, A);
            stan::math::initialize(eta_weekly, DUMMY_VAR__);
            stan::math::fill(eta_weekly, DUMMY_VAR__);
            current_statement_begin__ = 281;
            local_scalar_t__ beta0;
            (void) beta0;  // dummy to suppress unused var warning
            stan::math::initialize(beta0, DUMMY_VAR__);
            stan::math::fill(beta0, DUMMY_VAR__);
            current_statement_begin__ = 283;
            validate_non_negative_index("beta_weekly", "n_weeks", n_weeks);
            validate_non_negative_index("beta_weekly", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_weekly(n_weeks, A);
            stan::math::initialize(beta_weekly, DUMMY_VAR__);
            stan::math::fill(beta_weekly, DUMMY_VAR__);
            current_statement_begin__ = 284;
            validate_non_negative_index("beta_N", "(n_weeks * A)", (n_weeks * A));
            std::vector<local_scalar_t__> beta_N((n_weeks * A), local_scalar_t__(0));
            stan::math::initialize(beta_N, DUMMY_VAR__);
            stan::math::fill(beta_N, DUMMY_VAR__);
            current_statement_begin__ = 286;
            validate_non_negative_index("theta", "(((A * A) + (A * n_obs)) + 4)", (((A * A) + (A * n_obs)) + 4));
            std::vector<local_scalar_t__> theta((((A * A) + (A * n_obs)) + 4), local_scalar_t__(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 287;
            validate_non_negative_index("state_solutions", "n_obs", n_obs);
            validate_non_negative_index("state_solutions", "(A * n_difeq)", (A * n_difeq));
            std::vector<std::vector<local_scalar_t__> > state_solutions(n_obs, std::vector<local_scalar_t__>((A * n_difeq), local_scalar_t__(0)));
            stan::math::initialize(state_solutions, DUMMY_VAR__);
            stan::math::fill(state_solutions, DUMMY_VAR__);
            current_statement_begin__ = 288;
            validate_non_negative_index("comp_C", "n_obs", n_obs);
            validate_non_negative_index("comp_C", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> comp_C(n_obs, A);
            stan::math::initialize(comp_C, DUMMY_VAR__);
            stan::math::fill(comp_C, DUMMY_VAR__);
            current_statement_begin__ = 290;
            validate_non_negative_index("E_casesByAge", "n_obs", n_obs);
            validate_non_negative_index("E_casesByAge", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_casesByAge(n_obs, A);
            stan::math::initialize(E_casesByAge, DUMMY_VAR__);
            stan::math::fill(E_casesByAge, DUMMY_VAR__);
            current_statement_begin__ = 291;
            validate_non_negative_index("E_deathsByAge", "n_obs", n_obs);
            validate_non_negative_index("E_deathsByAge", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> E_deathsByAge(n_obs, A);
            stan::math::initialize(E_deathsByAge, DUMMY_VAR__);
            stan::math::fill(E_deathsByAge, DUMMY_VAR__);
            current_statement_begin__ = 293;
            validate_non_negative_index("cm_sym", "A", A);
            validate_non_negative_index("cm_sym", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cm_sym(A, A);
            stan::math::initialize(cm_sym, DUMMY_VAR__);
            stan::math::fill(cm_sym, DUMMY_VAR__);
            current_statement_begin__ = 294;
            validate_non_negative_index("cm_sample", "A", A);
            validate_non_negative_index("cm_sample", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cm_sample(A, A);
            stan::math::initialize(cm_sample, DUMMY_VAR__);
            stan::math::fill(cm_sample, DUMMY_VAR__);
            current_statement_begin__ = 297;
            validate_non_negative_index("L_raw_mat", "A", A);
            validate_non_negative_index("L_raw_mat", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_raw_mat(A, A);
            stan::math::initialize(L_raw_mat, DUMMY_VAR__);
            stan::math::fill(L_raw_mat, DUMMY_VAR__);
            stan::math::assign(L_raw_mat,to_triangular(L_raw, A, pstream__));
            current_statement_begin__ = 298;
            validate_non_negative_index("L", "A", A);
            validate_non_negative_index("L", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(A, A);
            stan::math::initialize(L, DUMMY_VAR__);
            stan::math::fill(L, DUMMY_VAR__);
            stan::math::assign(L,to_triangular(L_vector, A, pstream__));
            current_statement_begin__ = 299;
            validate_non_negative_index("eta_noise_mat", "(n_weeks - 1)", (n_weeks - 1));
            validate_non_negative_index("eta_noise_mat", "A", A);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_noise_mat((n_weeks - 1), A);
            stan::math::initialize(eta_noise_mat, DUMMY_VAR__);
            stan::math::fill(eta_noise_mat, DUMMY_VAR__);
            stan::math::assign(eta_noise_mat,to_matrix(eta_noise, (n_weeks - 1), A));
            // transformed parameters block statements
            current_statement_begin__ = 301;
            for (int col = 1; col <= A; ++col) {
                current_statement_begin__ = 301;
                for (int row = col; row <= A; ++row) {
                    current_statement_begin__ = 301;
                    stan::model::assign(L, 
                                stan::model::cons_list(stan::model::index_uni(row), stan::model::cons_list(stan::model::index_uni(col), stan::model::nil_index_list())), 
                                (get_base1(get_base1(L_cm, row, "L_cm", 1), col, "L_cm", 2) + ((p_sigmaCM * get_base1(get_base1(L_cm, row, "L_cm", 1), col, "L_cm", 2)) * get_base1(L_raw_mat, row, col, "L_raw_mat", 1))), 
                                "assigning variable L");
                }
            }
            current_statement_begin__ = 303;
            stan::math::assign(cm_sym, tcrossprod(L));
            current_statement_begin__ = 304;
            stan::math::assign(cm_sample, diag_pre_multiply(pop_diag, cm_sym));
            current_statement_begin__ = 307;
            stan::model::assign(eta_weekly, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        to_row_vector(eta_init), 
                        "assigning variable eta_weekly");
            current_statement_begin__ = 308;
            for (int i = 2; i <= n_weeks; ++i) {
                current_statement_begin__ = 308;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 308;
                    stan::model::assign(eta_weekly, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(eta_weekly, (i - 1), j, "eta_weekly", 1) + (get_base1(sigmaBM, j, "sigmaBM", 1) * get_base1(eta_noise_mat, (i - 1), j, "eta_noise_mat", 1))), 
                                "assigning variable eta_weekly");
                }
            }
            current_statement_begin__ = 310;
            stan::math::assign(beta0, stan::math::exp(eta0));
            current_statement_begin__ = 311;
            stan::math::assign(beta_weekly, stan::math::exp(eta_weekly));
            current_statement_begin__ = 312;
            stan::math::assign(beta_N, to_vector_colwise(beta_weekly, pstream__));
            current_statement_begin__ = 315;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_min_max(1, (A * A)), stan::model::nil_index_list()), 
                        to_vector_rowwise(cm_sample, pstream__), 
                        "assigning variable theta");
            current_statement_begin__ = 316;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(((A * A) + 1)), stan::model::nil_index_list()), 
                        gamma, 
                        "assigning variable theta");
            current_statement_begin__ = 317;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(((A * A) + 2)), stan::model::nil_index_list()), 
                        beta0, 
                        "assigning variable theta");
            current_statement_begin__ = 318;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_min_max(((A * A) + 3), (((A * A) + (A * n_obs)) + 2)), stan::model::nil_index_list()), 
                        rep_each(beta_N, 7, pstream__), 
                        "assigning variable theta");
            current_statement_begin__ = 319;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((((A * n_obs) + (A * A)) + 3)), stan::model::nil_index_list()), 
                        pi, 
                        "assigning variable theta");
            current_statement_begin__ = 320;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((((A * n_obs) + (A * A)) + 4)), stan::model::nil_index_list()), 
                        tau, 
                        "assigning variable theta");
            current_statement_begin__ = 323;
            stan::math::assign(state_solutions, integrate_ode_trapezoidal(init, t0, ts, theta, x_r, x_i, pstream__));
            current_statement_begin__ = 332;
            for (int i = 1; i <= n_obs; ++i) {
                current_statement_begin__ = 334;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 334;
                    stan::model::assign(E_deathsByAge, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                E_deathsByAge_day1, 
                                "assigning variable E_deathsByAge");
                }
                current_statement_begin__ = 336;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 339;
                    stan::model::assign(comp_C, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(state_solutions, i, "state_solutions", 1), (((n_difeq - 1) * A) + j), "state_solutions", 2) * n_pop), 
                                "assigning variable comp_C");
                    current_statement_begin__ = 342;
                    stan::model::assign(E_casesByAge, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(comp_C, i, j, "comp_C", 1) - (logical_eq(i, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>((logical_gt(get_base1(comp_C, i, j, "comp_C", 1), get_base1(comp_C, (i - 1), j, "comp_C", 1)) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(comp_C, (i - 1), j, "comp_C", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) )), 
                                "assigning variable E_casesByAge");
                    current_statement_begin__ = 345;
                    if (as_bool(logical_neq(i, 1))) {
                        current_statement_begin__ = 345;
                        stan::model::assign(E_deathsByAge, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    (get_base1(ifr_age, j, "ifr_age", 1) * dot_product(head(stan::model::rvalue(E_casesByAge, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "E_casesByAge"), (i - 1)), tail(I_D_rev, (i - 1)))), 
                                    "assigning variable E_deathsByAge");
                    }
                }
            }
            current_statement_begin__ = 351;
            if (as_bool(logical_neq(doprint, 0))) {
                current_statement_begin__ = 352;
                if (pstream__) {
                    stan_print(pstream__,"L_raw: ");
                    stan_print(pstream__,L_raw);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 353;
                if (pstream__) {
                    stan_print(pstream__,"L_raw_mat: ");
                    stan_print(pstream__,L_raw_mat);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 354;
                if (pstream__) {
                    stan_print(pstream__,"L: ");
                    stan_print(pstream__,L);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 355;
                if (pstream__) {
                    stan_print(pstream__,"cm_sym: ");
                    stan_print(pstream__,cm_sym);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 356;
                if (pstream__) {
                    stan_print(pstream__,"cm_sample: ");
                    stan_print(pstream__,cm_sample);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 357;
                if (pstream__) {
                    stan_print(pstream__,"eta_init: ");
                    stan_print(pstream__,eta_init);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 358;
                if (pstream__) {
                    stan_print(pstream__,"eta_noise: ");
                    stan_print(pstream__,eta_noise);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 359;
                if (pstream__) {
                    stan_print(pstream__,"sigmaBM: ");
                    stan_print(pstream__,sigmaBM);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 360;
                if (pstream__) {
                    stan_print(pstream__,"beta0: ");
                    stan_print(pstream__,beta0);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 361;
                if (pstream__) {
                    stan_print(pstream__,"eta_daily: ");
                    stan_print(pstream__,eta_weekly);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 362;
                if (pstream__) {
                    stan_print(pstream__,"beta_N: ");
                    stan_print(pstream__,beta_N);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 363;
                if (pstream__) {
                    stan_print(pstream__,"Expected Cases: ");
                    stan_print(pstream__,E_casesByAge);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 364;
                if (pstream__) {
                    stan_print(pstream__,"Expected Deaths: ");
                    stan_print(pstream__,E_deathsByAge);
                    *pstream__ << std::endl;
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 280;
            size_t eta_weekly_j_1_max__ = n_weeks;
            size_t eta_weekly_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < eta_weekly_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < eta_weekly_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(eta_weekly(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eta_weekly" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_weekly: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 281;
            if (stan::math::is_uninitialized(beta0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "beta0", beta0, 0);
            current_statement_begin__ = 283;
            size_t beta_weekly_j_1_max__ = n_weeks;
            size_t beta_weekly_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < beta_weekly_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < beta_weekly_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(beta_weekly(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta_weekly" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_weekly: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "beta_weekly", beta_weekly, 0);
            current_statement_begin__ = 284;
            size_t beta_N_k_0_max__ = (n_weeks * A);
            for (size_t k_0__ = 0; k_0__ < beta_N_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(beta_N[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_N" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_N: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t beta_N_i_0_max__ = (n_weeks * A);
            for (size_t i_0__ = 0; i_0__ < beta_N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta_N[i_0__]", beta_N[i_0__], 0);
            }
            current_statement_begin__ = 286;
            size_t theta_k_0_max__ = (((A * A) + (A * n_obs)) + 4);
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(theta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 287;
            size_t state_solutions_k_0_max__ = n_obs;
            size_t state_solutions_k_1_max__ = (A * n_difeq);
            for (size_t k_0__ = 0; k_0__ < state_solutions_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < state_solutions_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(state_solutions[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: state_solutions" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable state_solutions: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 288;
            size_t comp_C_j_1_max__ = n_obs;
            size_t comp_C_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < comp_C_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < comp_C_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(comp_C(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: comp_C" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable comp_C: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 290;
            size_t E_casesByAge_j_1_max__ = n_obs;
            size_t E_casesByAge_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < E_casesByAge_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < E_casesByAge_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(E_casesByAge(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: E_casesByAge" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E_casesByAge: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "E_casesByAge", E_casesByAge, 0);
            current_statement_begin__ = 291;
            size_t E_deathsByAge_j_1_max__ = n_obs;
            size_t E_deathsByAge_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < E_deathsByAge_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < E_deathsByAge_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(E_deathsByAge(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: E_deathsByAge" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E_deathsByAge: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "E_deathsByAge", E_deathsByAge, 0);
            current_statement_begin__ = 293;
            size_t cm_sym_j_1_max__ = A;
            size_t cm_sym_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < cm_sym_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < cm_sym_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(cm_sym(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: cm_sym" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cm_sym: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 294;
            size_t cm_sample_j_1_max__ = A;
            size_t cm_sample_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < cm_sample_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < cm_sample_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(cm_sample(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: cm_sample" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cm_sample: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 297;
            size_t L_raw_mat_j_1_max__ = A;
            size_t L_raw_mat_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < L_raw_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < L_raw_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(L_raw_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L_raw_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_raw_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 298;
            size_t L_j_1_max__ = A;
            size_t L_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(L(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 299;
            size_t eta_noise_mat_j_1_max__ = (n_weeks - 1);
            size_t eta_noise_mat_j_2_max__ = A;
            for (size_t j_1__ = 0; j_1__ < eta_noise_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < eta_noise_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(eta_noise_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eta_noise_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_noise_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 372;
            lp_accum__.add(normal_log<propto__>(eta0, 0, eta0_sd));
            current_statement_begin__ = 373;
            lp_accum__.add(std_normal_log<propto__>(eta_noise));
            current_statement_begin__ = 374;
            lp_accum__.add(normal_log<propto__>(eta_init, 0, get_base1(p_sigmaBM, 1, "p_sigmaBM", 1)));
            current_statement_begin__ = 375;
            lp_accum__.add(beta_log<propto__>(pi, get_base1(p_pi, 1, 1, "p_pi", 1), get_base1(p_pi, 1, 2, "p_pi", 1)));
            current_statement_begin__ = 376;
            lp_accum__.add(normal_log<propto__>(sigmaBM, 0, get_base1(p_sigmaBM, 1, "p_sigmaBM", 1)));
            current_statement_begin__ = 377;
            lp_accum__.add(exponential_log<propto__>(phiD, p_phi));
            current_statement_begin__ = 378;
            lp_accum__.add(std_normal_log<propto__>(L_raw));
            current_statement_begin__ = 381;
            if (as_bool(logical_neq(inference, 0))) {
                current_statement_begin__ = 382;
                for (int i = 1; i <= n_obs; ++i) {
                    current_statement_begin__ = 383;
                    for (int j = 1; j <= A; ++j) {
                        current_statement_begin__ = 384;
                        lp_accum__.add(neg_binomial_2_log(get_base1(get_base1(y_deaths, i, "y_deaths", 1), j, "y_deaths", 2), get_base1(E_deathsByAge, i, j, "E_deathsByAge", 1), (get_base1(E_deathsByAge, i, j, "E_deathsByAge", 1) / phiD)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta0");
        names__.push_back("eta_init");
        names__.push_back("eta_noise");
        names__.push_back("pi");
        names__.push_back("sigmaBM");
        names__.push_back("phiD");
        names__.push_back("L_raw");
        names__.push_back("eta_weekly");
        names__.push_back("beta0");
        names__.push_back("beta_weekly");
        names__.push_back("beta_N");
        names__.push_back("theta");
        names__.push_back("state_solutions");
        names__.push_back("comp_C");
        names__.push_back("E_casesByAge");
        names__.push_back("E_deathsByAge");
        names__.push_back("cm_sym");
        names__.push_back("cm_sample");
        names__.push_back("L_raw_mat");
        names__.push_back("L");
        names__.push_back("eta_noise_mat");
        names__.push_back("E_cases");
        names__.push_back("E_deaths");
        names__.push_back("Susceptibles");
        names__.push_back("log_like_age");
        names__.push_back("log_lik");
        names__.push_back("deviance");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((n_weeks - 1) * A));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(divide((A * (A + 1)), 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_weeks);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_weeks);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_weeks * A));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((((A * A) + (A * n_obs)) + 4));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back((A * n_difeq));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_weeks - 1));
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_seeiir_mbm_cp_halfnormal_volatilities_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double eta0 = in__.scalar_constrain();
        vars__.push_back(eta0);
        std::vector<double> eta_init;
        size_t eta_init_d_0_max__ = A;
        eta_init.reserve(eta_init_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_init_d_0_max__; ++d_0__) {
            eta_init.push_back(in__.scalar_constrain());
        }
        size_t eta_init_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < eta_init_k_0_max__; ++k_0__) {
            vars__.push_back(eta_init[k_0__]);
        }
        std::vector<double> eta_noise;
        size_t eta_noise_d_0_max__ = ((n_weeks - 1) * A);
        eta_noise.reserve(eta_noise_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_noise_d_0_max__; ++d_0__) {
            eta_noise.push_back(in__.scalar_constrain());
        }
        size_t eta_noise_k_0_max__ = ((n_weeks - 1) * A);
        for (size_t k_0__ = 0; k_0__ < eta_noise_k_0_max__; ++k_0__) {
            vars__.push_back(eta_noise[k_0__]);
        }
        double pi = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(pi);
        std::vector<double> sigmaBM;
        size_t sigmaBM_d_0_max__ = A;
        sigmaBM.reserve(sigmaBM_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigmaBM_d_0_max__; ++d_0__) {
            sigmaBM.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigmaBM_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < sigmaBM_k_0_max__; ++k_0__) {
            vars__.push_back(sigmaBM[k_0__]);
        }
        double phiD = in__.scalar_lb_constrain(0);
        vars__.push_back(phiD);
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_raw = in__.vector_constrain(divide((A * (A + 1)), 2));
        size_t L_raw_j_1_max__ = divide((A * (A + 1)), 2);
        for (size_t j_1__ = 0; j_1__ < L_raw_j_1_max__; ++j_1__) {
            vars__.push_back(L_raw(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 280;
            validate_non_negative_index("eta_weekly", "n_weeks", n_weeks);
            validate_non_negative_index("eta_weekly", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta_weekly(n_weeks, A);
            stan::math::initialize(eta_weekly, DUMMY_VAR__);
            stan::math::fill(eta_weekly, DUMMY_VAR__);
            current_statement_begin__ = 281;
            double beta0;
            (void) beta0;  // dummy to suppress unused var warning
            stan::math::initialize(beta0, DUMMY_VAR__);
            stan::math::fill(beta0, DUMMY_VAR__);
            current_statement_begin__ = 283;
            validate_non_negative_index("beta_weekly", "n_weeks", n_weeks);
            validate_non_negative_index("beta_weekly", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_weekly(n_weeks, A);
            stan::math::initialize(beta_weekly, DUMMY_VAR__);
            stan::math::fill(beta_weekly, DUMMY_VAR__);
            current_statement_begin__ = 284;
            validate_non_negative_index("beta_N", "(n_weeks * A)", (n_weeks * A));
            std::vector<double> beta_N((n_weeks * A), double(0));
            stan::math::initialize(beta_N, DUMMY_VAR__);
            stan::math::fill(beta_N, DUMMY_VAR__);
            current_statement_begin__ = 286;
            validate_non_negative_index("theta", "(((A * A) + (A * n_obs)) + 4)", (((A * A) + (A * n_obs)) + 4));
            std::vector<double> theta((((A * A) + (A * n_obs)) + 4), double(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 287;
            validate_non_negative_index("state_solutions", "n_obs", n_obs);
            validate_non_negative_index("state_solutions", "(A * n_difeq)", (A * n_difeq));
            std::vector<std::vector<double> > state_solutions(n_obs, std::vector<double>((A * n_difeq), double(0)));
            stan::math::initialize(state_solutions, DUMMY_VAR__);
            stan::math::fill(state_solutions, DUMMY_VAR__);
            current_statement_begin__ = 288;
            validate_non_negative_index("comp_C", "n_obs", n_obs);
            validate_non_negative_index("comp_C", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> comp_C(n_obs, A);
            stan::math::initialize(comp_C, DUMMY_VAR__);
            stan::math::fill(comp_C, DUMMY_VAR__);
            current_statement_begin__ = 290;
            validate_non_negative_index("E_casesByAge", "n_obs", n_obs);
            validate_non_negative_index("E_casesByAge", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E_casesByAge(n_obs, A);
            stan::math::initialize(E_casesByAge, DUMMY_VAR__);
            stan::math::fill(E_casesByAge, DUMMY_VAR__);
            current_statement_begin__ = 291;
            validate_non_negative_index("E_deathsByAge", "n_obs", n_obs);
            validate_non_negative_index("E_deathsByAge", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> E_deathsByAge(n_obs, A);
            stan::math::initialize(E_deathsByAge, DUMMY_VAR__);
            stan::math::fill(E_deathsByAge, DUMMY_VAR__);
            current_statement_begin__ = 293;
            validate_non_negative_index("cm_sym", "A", A);
            validate_non_negative_index("cm_sym", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> cm_sym(A, A);
            stan::math::initialize(cm_sym, DUMMY_VAR__);
            stan::math::fill(cm_sym, DUMMY_VAR__);
            current_statement_begin__ = 294;
            validate_non_negative_index("cm_sample", "A", A);
            validate_non_negative_index("cm_sample", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> cm_sample(A, A);
            stan::math::initialize(cm_sample, DUMMY_VAR__);
            stan::math::fill(cm_sample, DUMMY_VAR__);
            current_statement_begin__ = 297;
            validate_non_negative_index("L_raw_mat", "A", A);
            validate_non_negative_index("L_raw_mat", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_raw_mat(A, A);
            stan::math::initialize(L_raw_mat, DUMMY_VAR__);
            stan::math::fill(L_raw_mat, DUMMY_VAR__);
            stan::math::assign(L_raw_mat,to_triangular(L_raw, A, pstream__));
            current_statement_begin__ = 298;
            validate_non_negative_index("L", "A", A);
            validate_non_negative_index("L", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L(A, A);
            stan::math::initialize(L, DUMMY_VAR__);
            stan::math::fill(L, DUMMY_VAR__);
            stan::math::assign(L,to_triangular(L_vector, A, pstream__));
            current_statement_begin__ = 299;
            validate_non_negative_index("eta_noise_mat", "(n_weeks - 1)", (n_weeks - 1));
            validate_non_negative_index("eta_noise_mat", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta_noise_mat((n_weeks - 1), A);
            stan::math::initialize(eta_noise_mat, DUMMY_VAR__);
            stan::math::fill(eta_noise_mat, DUMMY_VAR__);
            stan::math::assign(eta_noise_mat,to_matrix(eta_noise, (n_weeks - 1), A));
            // do transformed parameters statements
            current_statement_begin__ = 301;
            for (int col = 1; col <= A; ++col) {
                current_statement_begin__ = 301;
                for (int row = col; row <= A; ++row) {
                    current_statement_begin__ = 301;
                    stan::model::assign(L, 
                                stan::model::cons_list(stan::model::index_uni(row), stan::model::cons_list(stan::model::index_uni(col), stan::model::nil_index_list())), 
                                (get_base1(get_base1(L_cm, row, "L_cm", 1), col, "L_cm", 2) + ((p_sigmaCM * get_base1(get_base1(L_cm, row, "L_cm", 1), col, "L_cm", 2)) * get_base1(L_raw_mat, row, col, "L_raw_mat", 1))), 
                                "assigning variable L");
                }
            }
            current_statement_begin__ = 303;
            stan::math::assign(cm_sym, tcrossprod(L));
            current_statement_begin__ = 304;
            stan::math::assign(cm_sample, diag_pre_multiply(pop_diag, cm_sym));
            current_statement_begin__ = 307;
            stan::model::assign(eta_weekly, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        to_row_vector(eta_init), 
                        "assigning variable eta_weekly");
            current_statement_begin__ = 308;
            for (int i = 2; i <= n_weeks; ++i) {
                current_statement_begin__ = 308;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 308;
                    stan::model::assign(eta_weekly, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(eta_weekly, (i - 1), j, "eta_weekly", 1) + (get_base1(sigmaBM, j, "sigmaBM", 1) * get_base1(eta_noise_mat, (i - 1), j, "eta_noise_mat", 1))), 
                                "assigning variable eta_weekly");
                }
            }
            current_statement_begin__ = 310;
            stan::math::assign(beta0, stan::math::exp(eta0));
            current_statement_begin__ = 311;
            stan::math::assign(beta_weekly, stan::math::exp(eta_weekly));
            current_statement_begin__ = 312;
            stan::math::assign(beta_N, to_vector_colwise(beta_weekly, pstream__));
            current_statement_begin__ = 315;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_min_max(1, (A * A)), stan::model::nil_index_list()), 
                        to_vector_rowwise(cm_sample, pstream__), 
                        "assigning variable theta");
            current_statement_begin__ = 316;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(((A * A) + 1)), stan::model::nil_index_list()), 
                        gamma, 
                        "assigning variable theta");
            current_statement_begin__ = 317;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(((A * A) + 2)), stan::model::nil_index_list()), 
                        beta0, 
                        "assigning variable theta");
            current_statement_begin__ = 318;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_min_max(((A * A) + 3), (((A * A) + (A * n_obs)) + 2)), stan::model::nil_index_list()), 
                        rep_each(beta_N, 7, pstream__), 
                        "assigning variable theta");
            current_statement_begin__ = 319;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((((A * n_obs) + (A * A)) + 3)), stan::model::nil_index_list()), 
                        pi, 
                        "assigning variable theta");
            current_statement_begin__ = 320;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni((((A * n_obs) + (A * A)) + 4)), stan::model::nil_index_list()), 
                        tau, 
                        "assigning variable theta");
            current_statement_begin__ = 323;
            stan::math::assign(state_solutions, integrate_ode_trapezoidal(init, t0, ts, theta, x_r, x_i, pstream__));
            current_statement_begin__ = 332;
            for (int i = 1; i <= n_obs; ++i) {
                current_statement_begin__ = 334;
                if (as_bool(logical_eq(i, 1))) {
                    current_statement_begin__ = 334;
                    stan::model::assign(E_deathsByAge, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                E_deathsByAge_day1, 
                                "assigning variable E_deathsByAge");
                }
                current_statement_begin__ = 336;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 339;
                    stan::model::assign(comp_C, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(state_solutions, i, "state_solutions", 1), (((n_difeq - 1) * A) + j), "state_solutions", 2) * n_pop), 
                                "assigning variable comp_C");
                    current_statement_begin__ = 342;
                    stan::model::assign(E_casesByAge, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(comp_C, i, j, "comp_C", 1) - (logical_eq(i, 1) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>((logical_gt(get_base1(comp_C, i, j, "comp_C", 1), get_base1(comp_C, (i - 1), j, "comp_C", 1)) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(comp_C, (i - 1), j, "comp_C", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) )), 
                                "assigning variable E_casesByAge");
                    current_statement_begin__ = 345;
                    if (as_bool(logical_neq(i, 1))) {
                        current_statement_begin__ = 345;
                        stan::model::assign(E_deathsByAge, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    (get_base1(ifr_age, j, "ifr_age", 1) * dot_product(head(stan::model::rvalue(E_casesByAge, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "E_casesByAge"), (i - 1)), tail(I_D_rev, (i - 1)))), 
                                    "assigning variable E_deathsByAge");
                    }
                }
            }
            current_statement_begin__ = 351;
            if (as_bool(logical_neq(doprint, 0))) {
                current_statement_begin__ = 352;
                if (pstream__) {
                    stan_print(pstream__,"L_raw: ");
                    stan_print(pstream__,L_raw);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 353;
                if (pstream__) {
                    stan_print(pstream__,"L_raw_mat: ");
                    stan_print(pstream__,L_raw_mat);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 354;
                if (pstream__) {
                    stan_print(pstream__,"L: ");
                    stan_print(pstream__,L);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 355;
                if (pstream__) {
                    stan_print(pstream__,"cm_sym: ");
                    stan_print(pstream__,cm_sym);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 356;
                if (pstream__) {
                    stan_print(pstream__,"cm_sample: ");
                    stan_print(pstream__,cm_sample);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 357;
                if (pstream__) {
                    stan_print(pstream__,"eta_init: ");
                    stan_print(pstream__,eta_init);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 358;
                if (pstream__) {
                    stan_print(pstream__,"eta_noise: ");
                    stan_print(pstream__,eta_noise);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 359;
                if (pstream__) {
                    stan_print(pstream__,"sigmaBM: ");
                    stan_print(pstream__,sigmaBM);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 360;
                if (pstream__) {
                    stan_print(pstream__,"beta0: ");
                    stan_print(pstream__,beta0);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 361;
                if (pstream__) {
                    stan_print(pstream__,"eta_daily: ");
                    stan_print(pstream__,eta_weekly);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 362;
                if (pstream__) {
                    stan_print(pstream__,"beta_N: ");
                    stan_print(pstream__,beta_N);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 363;
                if (pstream__) {
                    stan_print(pstream__,"Expected Cases: ");
                    stan_print(pstream__,E_casesByAge);
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 364;
                if (pstream__) {
                    stan_print(pstream__,"Expected Deaths: ");
                    stan_print(pstream__,E_deathsByAge);
                    *pstream__ << std::endl;
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 281;
            check_greater_or_equal(function__, "beta0", beta0, 0);
            current_statement_begin__ = 283;
            check_greater_or_equal(function__, "beta_weekly", beta_weekly, 0);
            current_statement_begin__ = 284;
            size_t beta_N_i_0_max__ = (n_weeks * A);
            for (size_t i_0__ = 0; i_0__ < beta_N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta_N[i_0__]", beta_N[i_0__], 0);
            }
            current_statement_begin__ = 290;
            check_greater_or_equal(function__, "E_casesByAge", E_casesByAge, 0);
            current_statement_begin__ = 291;
            check_greater_or_equal(function__, "E_deathsByAge", E_deathsByAge, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t eta_weekly_j_2_max__ = A;
                size_t eta_weekly_j_1_max__ = n_weeks;
                for (size_t j_2__ = 0; j_2__ < eta_weekly_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < eta_weekly_j_1_max__; ++j_1__) {
                        vars__.push_back(eta_weekly(j_1__, j_2__));
                    }
                }
                vars__.push_back(beta0);
                size_t beta_weekly_j_2_max__ = A;
                size_t beta_weekly_j_1_max__ = n_weeks;
                for (size_t j_2__ = 0; j_2__ < beta_weekly_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < beta_weekly_j_1_max__; ++j_1__) {
                        vars__.push_back(beta_weekly(j_1__, j_2__));
                    }
                }
                size_t beta_N_k_0_max__ = (n_weeks * A);
                for (size_t k_0__ = 0; k_0__ < beta_N_k_0_max__; ++k_0__) {
                    vars__.push_back(beta_N[k_0__]);
                }
                size_t theta_k_0_max__ = (((A * A) + (A * n_obs)) + 4);
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    vars__.push_back(theta[k_0__]);
                }
                size_t state_solutions_k_0_max__ = n_obs;
                size_t state_solutions_k_1_max__ = (A * n_difeq);
                for (size_t k_1__ = 0; k_1__ < state_solutions_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < state_solutions_k_0_max__; ++k_0__) {
                        vars__.push_back(state_solutions[k_0__][k_1__]);
                    }
                }
                size_t comp_C_j_2_max__ = A;
                size_t comp_C_j_1_max__ = n_obs;
                for (size_t j_2__ = 0; j_2__ < comp_C_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < comp_C_j_1_max__; ++j_1__) {
                        vars__.push_back(comp_C(j_1__, j_2__));
                    }
                }
                size_t E_casesByAge_j_2_max__ = A;
                size_t E_casesByAge_j_1_max__ = n_obs;
                for (size_t j_2__ = 0; j_2__ < E_casesByAge_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < E_casesByAge_j_1_max__; ++j_1__) {
                        vars__.push_back(E_casesByAge(j_1__, j_2__));
                    }
                }
                size_t E_deathsByAge_j_2_max__ = A;
                size_t E_deathsByAge_j_1_max__ = n_obs;
                for (size_t j_2__ = 0; j_2__ < E_deathsByAge_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < E_deathsByAge_j_1_max__; ++j_1__) {
                        vars__.push_back(E_deathsByAge(j_1__, j_2__));
                    }
                }
                size_t cm_sym_j_2_max__ = A;
                size_t cm_sym_j_1_max__ = A;
                for (size_t j_2__ = 0; j_2__ < cm_sym_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < cm_sym_j_1_max__; ++j_1__) {
                        vars__.push_back(cm_sym(j_1__, j_2__));
                    }
                }
                size_t cm_sample_j_2_max__ = A;
                size_t cm_sample_j_1_max__ = A;
                for (size_t j_2__ = 0; j_2__ < cm_sample_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < cm_sample_j_1_max__; ++j_1__) {
                        vars__.push_back(cm_sample(j_1__, j_2__));
                    }
                }
                size_t L_raw_mat_j_2_max__ = A;
                size_t L_raw_mat_j_1_max__ = A;
                for (size_t j_2__ = 0; j_2__ < L_raw_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < L_raw_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(L_raw_mat(j_1__, j_2__));
                    }
                }
                size_t L_j_2_max__ = A;
                size_t L_j_1_max__ = A;
                for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                        vars__.push_back(L(j_1__, j_2__));
                    }
                }
                size_t eta_noise_mat_j_2_max__ = A;
                size_t eta_noise_mat_j_1_max__ = (n_weeks - 1);
                for (size_t j_2__ = 0; j_2__ < eta_noise_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < eta_noise_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(eta_noise_mat(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 391;
            validate_non_negative_index("E_cases", "n_obs", n_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> E_cases(n_obs);
            stan::math::initialize(E_cases, DUMMY_VAR__);
            stan::math::fill(E_cases, DUMMY_VAR__);
            current_statement_begin__ = 392;
            validate_non_negative_index("E_deaths", "n_obs", n_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> E_deaths(n_obs);
            stan::math::initialize(E_deaths, DUMMY_VAR__);
            stan::math::fill(E_deaths, DUMMY_VAR__);
            current_statement_begin__ = 393;
            validate_non_negative_index("Susceptibles", "n_obs", n_obs);
            validate_non_negative_index("Susceptibles", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Susceptibles(n_obs, A);
            stan::math::initialize(Susceptibles, DUMMY_VAR__);
            stan::math::fill(Susceptibles, DUMMY_VAR__);
            current_statement_begin__ = 395;
            validate_non_negative_index("log_like_age", "n_obs", n_obs);
            validate_non_negative_index("log_like_age", "A", A);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_like_age(n_obs, A);
            stan::math::initialize(log_like_age, DUMMY_VAR__);
            stan::math::fill(log_like_age, DUMMY_VAR__);
            current_statement_begin__ = 396;
            validate_non_negative_index("log_lik", "n_obs", n_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_obs);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 398;
            double deviance;
            (void) deviance;  // dummy to suppress unused var warning
            stan::math::initialize(deviance, DUMMY_VAR__);
            stan::math::fill(deviance, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 401;
            stan::math::assign(E_cases, multiply(E_casesByAge, ones_vector_A));
            current_statement_begin__ = 404;
            stan::math::assign(E_deaths, multiply(E_deathsByAge, ones_vector_A));
            current_statement_begin__ = 406;
            for (int i = 1; i <= n_obs; ++i) {
                current_statement_begin__ = 408;
                for (int j = 1; j <= A; ++j) {
                    current_statement_begin__ = 409;
                    stan::model::assign(Susceptibles, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((get_base1(get_base1(state_solutions, i, "state_solutions", 1), j, "state_solutions", 2) + (get_base1(age_dist, j, "age_dist", 1) * (1 - pi))) * n_pop), 
                                "assigning variable Susceptibles");
                    current_statement_begin__ = 410;
                    stan::model::assign(log_like_age, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                neg_binomial_2_log(get_base1(get_base1(y_deaths, i, "y_deaths", 1), j, "y_deaths", 2), get_base1(E_deathsByAge, i, j, "E_deathsByAge", 1), (get_base1(E_deathsByAge, i, j, "E_deathsByAge", 1) / phiD)), 
                                "assigning variable log_like_age");
                }
                current_statement_begin__ = 413;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(log_like_age, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "log_like_age")), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 417;
            stan::math::assign(deviance, (-(2) * sum(log_lik)));
            // validate, write generated quantities
            current_statement_begin__ = 391;
            size_t E_cases_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < E_cases_j_1_max__; ++j_1__) {
                vars__.push_back(E_cases(j_1__));
            }
            current_statement_begin__ = 392;
            size_t E_deaths_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
                vars__.push_back(E_deaths(j_1__));
            }
            current_statement_begin__ = 393;
            size_t Susceptibles_j_2_max__ = A;
            size_t Susceptibles_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < Susceptibles_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Susceptibles_j_1_max__; ++j_1__) {
                    vars__.push_back(Susceptibles(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 395;
            size_t log_like_age_j_2_max__ = A;
            size_t log_like_age_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < log_like_age_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_like_age_j_1_max__; ++j_1__) {
                    vars__.push_back(log_like_age(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 396;
            size_t log_lik_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 398;
            vars__.push_back(deviance);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_seeiir_mbm_cp_halfnormal_volatilities";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta0";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_init_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < eta_init_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_init" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_noise_k_0_max__ = ((n_weeks - 1) * A);
        for (size_t k_0__ = 0; k_0__ < eta_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pi";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaBM_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < sigmaBM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaBM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phiD";
        param_names__.push_back(param_name_stream__.str());
        size_t L_raw_j_1_max__ = divide((A * (A + 1)), 2);
        for (size_t j_1__ = 0; j_1__ < L_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_weekly_j_2_max__ = A;
            size_t eta_weekly_j_1_max__ = n_weeks;
            for (size_t j_2__ = 0; j_2__ < eta_weekly_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_weekly_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_weekly" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0";
            param_names__.push_back(param_name_stream__.str());
            size_t beta_weekly_j_2_max__ = A;
            size_t beta_weekly_j_1_max__ = n_weeks;
            for (size_t j_2__ = 0; j_2__ < beta_weekly_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_weekly_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta_weekly" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_N_k_0_max__ = (n_weeks * A);
            for (size_t k_0__ = 0; k_0__ < beta_N_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_N" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_k_0_max__ = (((A * A) + (A * n_obs)) + 4);
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t state_solutions_k_0_max__ = n_obs;
            size_t state_solutions_k_1_max__ = (A * n_difeq);
            for (size_t k_1__ = 0; k_1__ < state_solutions_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < state_solutions_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "state_solutions" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t comp_C_j_2_max__ = A;
            size_t comp_C_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < comp_C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < comp_C_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "comp_C" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_casesByAge_j_2_max__ = A;
            size_t E_casesByAge_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < E_casesByAge_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_casesByAge_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_casesByAge" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_deathsByAge_j_2_max__ = A;
            size_t E_deathsByAge_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < E_deathsByAge_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deathsByAge_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deathsByAge" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cm_sym_j_2_max__ = A;
            size_t cm_sym_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < cm_sym_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cm_sym_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cm_sym" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cm_sample_j_2_max__ = A;
            size_t cm_sample_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < cm_sample_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cm_sample_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cm_sample" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_raw_mat_j_2_max__ = A;
            size_t L_raw_mat_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < L_raw_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_raw_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_raw_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_j_2_max__ = A;
            size_t L_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_noise_mat_j_2_max__ = A;
            size_t eta_noise_mat_j_1_max__ = (n_weeks - 1);
            for (size_t j_2__ = 0; j_2__ < eta_noise_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_noise_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_noise_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t E_cases_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < E_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t E_deaths_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E_deaths" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Susceptibles_j_2_max__ = A;
        size_t Susceptibles_j_1_max__ = n_obs;
        for (size_t j_2__ = 0; j_2__ < Susceptibles_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Susceptibles_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Susceptibles" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_like_age_j_2_max__ = A;
        size_t log_like_age_j_1_max__ = n_obs;
        for (size_t j_2__ = 0; j_2__ < log_like_age_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_like_age_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like_age" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "deviance";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta0";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_init_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < eta_init_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_init" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_noise_k_0_max__ = ((n_weeks - 1) * A);
        for (size_t k_0__ = 0; k_0__ < eta_noise_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_noise" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pi";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaBM_k_0_max__ = A;
        for (size_t k_0__ = 0; k_0__ < sigmaBM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaBM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phiD";
        param_names__.push_back(param_name_stream__.str());
        size_t L_raw_j_1_max__ = divide((A * (A + 1)), 2);
        for (size_t j_1__ = 0; j_1__ < L_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_weekly_j_2_max__ = A;
            size_t eta_weekly_j_1_max__ = n_weeks;
            for (size_t j_2__ = 0; j_2__ < eta_weekly_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_weekly_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_weekly" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0";
            param_names__.push_back(param_name_stream__.str());
            size_t beta_weekly_j_2_max__ = A;
            size_t beta_weekly_j_1_max__ = n_weeks;
            for (size_t j_2__ = 0; j_2__ < beta_weekly_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_weekly_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta_weekly" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_N_k_0_max__ = (n_weeks * A);
            for (size_t k_0__ = 0; k_0__ < beta_N_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_N" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_k_0_max__ = (((A * A) + (A * n_obs)) + 4);
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t state_solutions_k_0_max__ = n_obs;
            size_t state_solutions_k_1_max__ = (A * n_difeq);
            for (size_t k_1__ = 0; k_1__ < state_solutions_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < state_solutions_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "state_solutions" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t comp_C_j_2_max__ = A;
            size_t comp_C_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < comp_C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < comp_C_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "comp_C" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_casesByAge_j_2_max__ = A;
            size_t E_casesByAge_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < E_casesByAge_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_casesByAge_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_casesByAge" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t E_deathsByAge_j_2_max__ = A;
            size_t E_deathsByAge_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < E_deathsByAge_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < E_deathsByAge_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "E_deathsByAge" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cm_sym_j_2_max__ = A;
            size_t cm_sym_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < cm_sym_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cm_sym_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cm_sym" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t cm_sample_j_2_max__ = A;
            size_t cm_sample_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < cm_sample_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cm_sample_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cm_sample" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_raw_mat_j_2_max__ = A;
            size_t L_raw_mat_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < L_raw_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_raw_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_raw_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_j_2_max__ = A;
            size_t L_j_1_max__ = A;
            for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_noise_mat_j_2_max__ = A;
            size_t eta_noise_mat_j_1_max__ = (n_weeks - 1);
            for (size_t j_2__ = 0; j_2__ < eta_noise_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_noise_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_noise_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t E_cases_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < E_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t E_deaths_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < E_deaths_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "E_deaths" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Susceptibles_j_2_max__ = A;
        size_t Susceptibles_j_1_max__ = n_obs;
        for (size_t j_2__ = 0; j_2__ < Susceptibles_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Susceptibles_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Susceptibles" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_like_age_j_2_max__ = A;
        size_t log_like_age_j_1_max__ = n_obs;
        for (size_t j_2__ = 0; j_2__ < log_like_age_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_like_age_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like_age" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "deviance";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_seeiir_mbm_cp_halfnormal_volatilities_namespace::model_seeiir_mbm_cp_halfnormal_volatilities stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
